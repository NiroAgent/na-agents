version: '3.8'

services:
  # AI Architect Agent
  architect-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: architect-agent
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=development
      - DASHBOARD_URL=http://dashboard:4001
      - LOG_LEVEL=info
    command: ["node", "dist/agents/architect-agent.js"]
    volumes:
      - ./logs:/app/logs
      - ./architecture_specs:/app/architecture_specs
    networks:
      - agents-network
    depends_on:
      - dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Developer Agent
  developer-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: developer-agent
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=development
      - DASHBOARD_URL=http://dashboard:4001
      - LOG_LEVEL=info
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: ["node", "dist/agents/developer-agent.js"]
    volumes:
      - ./logs:/app/logs
      - ./generated_code:/app/generated_code
    networks:
      - agents-network
    depends_on:
      - dashboard
      - architect-agent
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI DevOps Agent
  devops-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: devops-agent
    ports:
      - "5003:5003"
    environment:
      - NODE_ENV=development
      - DASHBOARD_URL=http://dashboard:4001
      - LOG_LEVEL=info
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: ["node", "dist/agents/devops-agent.js"]
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - agents-network
    depends_on:
      - dashboard
      - developer-agent
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI QA Agent
  qa-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qa-agent
    ports:
      - "5004:5004"
    environment:
      - NODE_ENV=development
      - DASHBOARD_URL=http://dashboard:4001
      - LOG_LEVEL=info
    command: ["node", "dist/agents/qa-agent.js"]
    volumes:
      - ./logs:/app/logs
      - ./qa_reports:/app/qa_reports
    networks:
      - agents-network
    depends_on:
      - dashboard
      - developer-agent
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Manager Agent
  manager-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: manager-agent
    ports:
      - "5005:5005"
    environment:
      - NODE_ENV=development
      - DASHBOARD_URL=http://dashboard:4001
      - LOG_LEVEL=info
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    command: ["node", "dist/agents/manager-agent.js"]
    volumes:
      - ./logs:/app/logs
    networks:
      - agents-network
    depends_on:
      - dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dashboard (external service - this is just a placeholder)
  dashboard:
    image: na-agent-dashboard:latest
    container_name: dashboard
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=development
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - agents-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Note: This is a placeholder - the actual dashboard is being developed separately

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: agents-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - agents-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}

  # PostgreSQL for persistent data (optional)
  postgres:
    image: postgres:15-alpine
    container_name: agents-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agents_db
      - POSTGRES_USER=agents
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - agents-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agents -d agents_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (optional, for load balancing)
  nginx:
    image: nginx:alpine
    container_name: agents-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - agents-network
    depends_on:
      - architect-agent
      - developer-agent
      - devops-agent
      - qa-agent
      - manager-agent
      - dashboard
    restart: unless-stopped
    
  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agents-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - agents-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: agents-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - agents-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  agents-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local